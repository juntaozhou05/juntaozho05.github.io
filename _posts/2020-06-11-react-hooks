---
layout: post
title: "react hooks"
subtitle: ""
author: "ZJT"
header-style: text
tags:
  - react
---

### hooks解决的问题

- 很难复用逻辑（只能用 HOC，或者 render props），会导致组件树层级很深
- 会产生巨大的组件（指很多代码必须写在类里面）
- 类组件很难理解，比如方法需要 bind，this 指向不明确

### hooks使用注意

- 不能将 hooks 放在循环、条件语句或者嵌套方法内。react 是根据 hooks 出现顺序来记录对应状态的（如果我们放到嵌套逻辑里，很可能就会造成游标的错乱）。
- 只在 function 组件和自定义 hooks 中使用 hooks。
- 命名规范：useState 返回数组的第二项以 set 开头（仅作为约定）。自定义 hooks 以 use 开头（可被 lint 校验）。

### 所有hooks

- useState：setState
- useReducer：setState，同时 useState 也是该方法的封装
- useRef: refuseImperativeHandle: 给 ref 分配特定的属性
- useContext: context，需配合 createContext 使用
- useMemo: 可以对 setState 的优化（memo会判断父组件传入的 props 是否发生改变来重新渲染当前组件）
- useCallback: useMemo 的变形，对函数进行优化
- useEffect: 类似 componentDidMount/Update, componentWillUnmount，当效果为 componentDidMount/Update 时，总是在整个更新周期的最后（页面渲染完成后）才执行
- useLayoutEffect: 用法与 useEffect 相同，区别在于该方法的回调会在数据更新完成后，页面渲染之前进行，该方法会阻碍页面的渲染
- useDebugValue：用于在 React 开发者工具中显示自定义 hook 的标签

### 自定义hooks

自定义 Hook 是一个函数，其名称以use开头，函数内部可以调用其他的 Hook












